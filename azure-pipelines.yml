trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  MAVEN_OPTS: '-Xmx1024m'
  JDK_VERSION: '11'

steps:
- script: |
    # Check if Java JDK is already installed
    if ! java -version 2>&1 | grep -q 'openjdk version "11'; then
      echo "Java JDK 11 not found. Installing..."
      sudo apt-get update
      sudo apt-get install -y openjdk-11-jdk wget unzip
    else
      echo "Java JDK 11 is already installed."
    fi
  displayName: 'Check and Install Java JDK'

- script: |
    # Install Google Chrome if not already installed
    if [ ! -f /usr/bin/google-chrome ]; then
      wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
      sudo apt-get update
      sudo apt-get install -y ./google-chrome-stable_current_amd64.deb
    else
      echo "Google Chrome is already installed."
    fi
  displayName: 'Install Google Chrome'

- script: |
    # Download and install ChromeDriver for Chrome version 127 if not already installed
    if [ ! -f /usr/local/bin/chromedriver ]; then
      echo "ChromeDriver not found. Installing..."
      wget https://storage.googleapis.com/chrome-for-testing-public/127.0.6533.99/linux64/chromedriver-linux64.zip
      unzip chromedriver-linux64.zip
      sudo mv -f chromedriver-linux64/chromedriver /usr/local/bin/chromedriver
      sudo chmod +x /usr/local/bin/chromedriver
    else
      echo "ChromeDriver is already installed."
    fi
  displayName: 'Install ChromeDriver'

- script: |
    # Install Firefox if not already installed
    if ! command -v firefox &> /dev/null; then
      echo "Firefox not found. Installing..."
      sudo apt-get update
      sudo apt-get install -y firefox
    else
      echo "Firefox is already installed."
    fi
  displayName: 'Install Firefox'

- script: |
    # Install GeckoDriver if not already installed
    if [ ! -f /usr/local/bin/geckodriver ]; then
      echo "GeckoDriver not found. Installing..."
      # Get the latest GeckoDriver version
      GECKODRIVER_VERSION=$(curl -sS https://api.github.com/repos/mozilla/geckodriver/releases/latest | grep 'tag_name' | cut -d\" -f4)
      echo "Downloading GeckoDriver version ${GECKODRIVER_VERSION}..."
      # Construct the correct download URL
      DOWNLOAD_URL="https://github.com/mozilla/geckodriver/releases/download/${GECKODRIVER_VERSION}/geckodriver-${GECKODRIVER_VERSION}-linux64.tar.gz"
      wget "$DOWNLOAD_URL"
      tar -xzf geckodriver-${GECKODRIVER_VERSION}-linux64.tar.gz
      sudo mv geckodriver /usr/local/bin/geckodriver
      sudo chmod +x /usr/local/bin/geckodriver
    else
      echo "GeckoDriver is already installed."
    fi
  displayName: 'Install GeckoDriver'

- script: |
    # Print Google Chrome version
    echo "Google Chrome version:"
    google-chrome --version

    # Print ChromeDriver version
    echo "ChromeDriver version:"
    chromedriver --version

    # Print Firefox version
    echo "Firefox version:"
    firefox --version

    # Print GeckoDriver version
    echo "GeckoDriver version:"
    geckodriver --version

    # Print GeckoDriver location
    echo "GeckoDriver location:"
    which geckodriver
  displayName: 'Print Browser and Driver Versions'

- script: |
    # Run a simple curl command to test network connectivity
    echo "Testing network connectivity..."
    curl -I https://www.google.com
  displayName: 'Test Network Connectivity'

- task: Maven@3
  inputs:
    mavenVersionOption: 'Default'
    mavenAuthenticateFeed: false
    options: 'clean test -DSuiteXmlFile=suitefiles/PulseSuite.xml'
  displayName: 'Run Maven Tests'

- script: |
    # Print the current working directory
    echo "Current working directory:"
    pwd

    # Print the path to the target folder
    echo "Path to target folder:"
    ls -la target
  displayName: 'Print Working Directory and Target Folder Path'

- script: |
    if [ ! -d 'target/cucumber-reports/advanced-reports' ]; then
      echo "Cucumber reports directory not found. Exiting..."
      exit 1
    fi
  displayName: 'Check Cucumber Reports Directory'

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: 'target/cucumber-reports/advanced-reports'  # Ensure this path is correct for your Cucumber reports
    artifactName: 'cucumber-reports'
    publishLocation: 'Container'
  displayName: 'Publish Cucumber Reports'
  condition: succeeded()

- script: |
    echo "## Viewing Cucumber Reports"
    echo "You can view the Cucumber reports at:"
    echo "[$(Build.ArtifactStagingDirectory)/cucumber-reports/advanced-reports](https://dev.azure.com/$(Build.ProjectName)/$(Build.DefinitionName)/_build/results?buildId=$(Build.BuildId)&view=artifacts&pathAsName=true&artifactId=cucumber-reports)"
  displayName: 'Print Report URL'
